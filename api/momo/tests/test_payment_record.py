# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.payment_record import PaymentRecord

class TestPaymentRecord(unittest.TestCase):
    """PaymentRecord unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentRecord:
        """Test PaymentRecord
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentRecord`
        """
        model = PaymentRecord()
        if include_optional:
            return PaymentRecord(
                payment_date = '',
                description = '',
                status = '',
                fulfillment_status = '',
                details = openapi_client.models.payment_record_details.PaymentRecord_details(
                    brand = '', 
                    issuer = '', ),
                payment_id = '',
                payment_type = '',
                commit_date = '',
                fx_rate = '',
                initiating_user = '',
                real_user = '',
                initiating_account_holder = '',
                real_account_holder = '',
                originator = '',
                originator_account = '',
                main_instruction_id = '',
                instruction_id = '',
                transaction_id = '',
                destination_account_holder = '',
                originator_first_name = '',
                originator_last_name = '',
                originator_handler_first_name = '',
                originator_handler_last_name = '',
                destination_first_name = '',
                destination_last_name = '',
                destination_handler_first_name = '',
                destination_handler_last_name = '',
                channel = '',
                originator_account_holder = '',
                destination = '',
                destination_account = '',
                originator_amount = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', ),
                originator_fee = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', ),
                original_amount = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', ),
                amount = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', ),
                destination_amount = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', ),
                destination_fee = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', ),
                destination_available_balance = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', ),
                destination_total_balance = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', ),
                destination_committed_balance = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                    amount = '', 
                    unit = '', )
            )
        else:
            return PaymentRecord(
        )
        """

    def testPaymentRecord(self):
        """Test PaymentRecord"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
