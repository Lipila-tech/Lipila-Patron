# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.payment_history_response_data import PaymentHistoryResponseData

class TestPaymentHistoryResponseData(unittest.TestCase):
    """PaymentHistoryResponseData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentHistoryResponseData:
        """Test PaymentHistoryResponseData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentHistoryResponseData`
        """
        model = PaymentHistoryResponseData()
        if include_optional:
            return PaymentHistoryResponseData(
                id = '',
                href = '',
                authorization_code = '',
                correlator_id = '',
                description = '',
                name = '',
                payment_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = '',
                status_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                account = openapi_client.models.account_ref.AccountRef(
                    id = '', 
                    description = '', 
                    name = '', ),
                amount = openapi_client.models.money.Money(
                    unit = '', 
                    value = 1.337, ),
                related_party = openapi_client.models.related_party.RelatedParty(
                    id = '', 
                    name = '', 
                    other_name = '', 
                    email = '', 
                    valid_for = openapi_client.models.time_period.TimePeriod(
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ),
                payer = openapi_client.models.related_party.RelatedParty(
                    id = '', 
                    name = '', 
                    other_name = '', 
                    email = '', 
                    valid_for = openapi_client.models.time_period.TimePeriod(
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ),
                payment_item = [
                    openapi_client.models.payment_item.PaymentItem(
                        id = '', 
                        item = openapi_client.models.payment_item_item.PaymentItem_item(
                            id = '', 
                            name = '', ), )
                    ],
                total_amount = openapi_client.models.money.Money(
                    unit = '', 
                    value = 1.337, ),
                type = '',
                callback_url = '',
                payment_records = [
                    openapi_client.models.payment_record.PaymentRecord(
                        payment_date = '', 
                        description = '', 
                        status = '', 
                        fulfillment_status = '', 
                        details = openapi_client.models.payment_record_details.PaymentRecord_details(
                            brand = '', 
                            issuer = '', ), 
                        payment_id = '', 
                        payment_type = '', 
                        commit_date = '', 
                        fx_rate = '', 
                        initiating_user = '', 
                        real_user = '', 
                        initiating_account_holder = '', 
                        real_account_holder = '', 
                        originator = '', 
                        originator_account = '', 
                        main_instruction_id = '', 
                        instruction_id = '', 
                        transaction_id = '', 
                        destination_account_holder = '', 
                        originator_first_name = '', 
                        originator_last_name = '', 
                        originator_handler_first_name = '', 
                        originator_handler_last_name = '', 
                        destination_first_name = '', 
                        destination_last_name = '', 
                        destination_handler_first_name = '', 
                        destination_handler_last_name = '', 
                        channel = '', 
                        originator_account_holder = '', 
                        destination = '', 
                        destination_account = '', 
                        originator_amount = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                            amount = '', 
                            unit = '', ), 
                        originator_fee = openapi_client.models.payment_record_originator_amount.PaymentRecord_originatorAmount(
                            amount = '', 
                            unit = '', ), 
                        original_amount = , 
                        amount = , 
                        destination_amount = , 
                        destination_fee = , 
                        destination_available_balance = , 
                        destination_total_balance = , 
                        destination_committed_balance = , )
                    ]
            )
        else:
            return PaymentHistoryResponseData(
        )
        """

    def testPaymentHistoryResponseData(self):
        """Test PaymentHistoryResponseData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
