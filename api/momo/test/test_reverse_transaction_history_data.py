# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.reverse_transaction_history_data import ReverseTransactionHistoryData

class TestReverseTransactionHistoryData(unittest.TestCase):
    """ReverseTransactionHistoryData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReverseTransactionHistoryData:
        """Test ReverseTransactionHistoryData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReverseTransactionHistoryData`
        """
        model = ReverseTransactionHistoryData()
        if include_optional:
            return ReverseTransactionHistoryData(
                transactionstatus = '',
                transfertype = '',
                startdate = '',
                commitdate = '',
                fxrate = '',
                externalfxrate = '',
                initiatinguser = '',
                realuser = '',
                reviewinguser = '',
                initiatingaccountholder = '',
                realaccountholder = '',
                providercategory = '',
                var_from = '',
                fromaccount = '',
                fromamount = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromfee = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromexternalfee = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromdiscount = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                frompromotion = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromloyfee = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromloyreward = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                frompromotionrefund = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromnote = '',
                fromavailablebalance = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromtotalbalance = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromcommittedbalance = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromaccountholder = '',
                originalamount = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                externalamount = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                amount = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromcouponvalue = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromtaxes = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromtaxesrefund = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                to = '',
                toaccount = '',
                toamount = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                tofee = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                toexternalfee = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                topromotion = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                toloyfee = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                toloyreward = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                topromotionrefund = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                todiscountrefund = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                tomessage = '',
                toavailablebalance = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                tototalbalance = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                tocommittedbalance = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                maininstructionid = '',
                instructionid = '',
                externaltransactionid = '',
                transactiontext = '',
                tofeerefund = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromfeerefund = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                toaccountholder = '',
                totaxes = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                totaxesrefund = openapi_client.models.money_currency_type.MoneyCurrencyType(
                    amount = 50.0, 
                    currency = 'XOF', ),
                fromfirstname = '',
                fromlastname = '',
                fromhandlerfirstname = '',
                fromhandlerlastname = '',
                tofirstname = '',
                tolastname = '',
                tohandlerfirstname = '',
                tohandlerlastname = '',
                fromposmsisdn = '',
                toposmsisdn = '',
                originaltransactionid = '',
                communicationchannel = '',
                externalserviceprovider = '',
                external_svc_prd_tran_id = '',
                from_ex_instru_prov_trans_id = '',
                to_ex_instru_prov_trans_id = '',
                from_ex_instru_acc_holder = '',
                to_ex_instru_acc_holder = '',
                fitype = ''
            )
        else:
            return ReverseTransactionHistoryData(
        )
        """

    def testReverseTransactionHistoryData(self):
        """Test ReverseTransactionHistoryData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
