# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.payment_response import PaymentResponse

class TestPaymentResponse(unittest.TestCase):
    """PaymentResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentResponse:
        """Test PaymentResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentResponse`
        """
        model = PaymentResponse()
        if include_optional:
            return PaymentResponse(
                status_code = '0000',
                provider_transaction_id = 'FT172145YB21',
                status_message = '',
                support_message = '',
                sequence_no = '1234',
                fulfillment_status = 'Succesful',
                data = openapi_client.models.data.Data(
                    approval_id = '', 
                    transaction_fee = openapi_client.models.money_type.MoneyType(
                        amount = 50.0, 
                        units = 'XOF', ), 
                    discount = openapi_client.models.money_type.MoneyType(
                        amount = 50.0, 
                        units = 'XOF', ), 
                    new_balance = , 
                    payer_note = 'Manual Boost for RWC', 
                    status = 'Approved', 
                    correlator_id = 'c5f80cb8-dc8b-11ea-87d0-0242ac130003', 
                    status_date = '2020-08-12T11:04:53.668Z', 
                    additional_information = openapi_client.models.additional_information.AdditionalInformation(
                        name = 'BundleName', 
                        description = 'Voice_1111', ), 
                    meta_data = [
                        openapi_client.models.additional_information.AdditionalInformation(
                            name = 'BundleName', 
                            description = 'Voice_1111', )
                        ], 
                    loyalty_information = openapi_client.models.loyalty_balances.LoyaltyBalances(
                        generated_amount = , 
                        consumed_amount = , ), 
                    external_code = '', ),
                links = openapi_client.models.payment_response__links.PaymentResponse__Links(
                    self = openapi_client.models.payment_response__links_self.PaymentResponse__Links_Self(
                        href = 'https://host:port/payments/v1/12345', ), )
            )
        else:
            return PaymentResponse(
        )
        """

    def testPaymentResponse(self):
        """Test PaymentResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
