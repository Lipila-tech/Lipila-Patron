# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.reverse_transaction_history import ReverseTransactionHistory

class TestReverseTransactionHistory(unittest.TestCase):
    """ReverseTransactionHistory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReverseTransactionHistory:
        """Test ReverseTransactionHistory
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReverseTransactionHistory`
        """
        model = ReverseTransactionHistory()
        if include_optional:
            return ReverseTransactionHistory(
                status_code = '0000',
                status_message = 'success',
                transaction_id = '',
                correlator_id = '',
                sequence_no = '12345',
                data = openapi_client.models.reverse_transaction_history_data.ReverseTransactionHistoryData(
                    transactionstatus = '', 
                    transfertype = '', 
                    startdate = '', 
                    commitdate = '', 
                    fxrate = '', 
                    externalfxrate = '', 
                    initiatinguser = '', 
                    realuser = '', 
                    reviewinguser = '', 
                    initiatingaccountholder = '', 
                    realaccountholder = '', 
                    providercategory = '', 
                    from = '', 
                    fromaccount = '', 
                    fromamount = openapi_client.models.money_currency_type.MoneyCurrencyType(
                        amount = 50.0, 
                        currency = 'XOF', ), 
                    fromfee = openapi_client.models.money_currency_type.MoneyCurrencyType(
                        amount = 50.0, 
                        currency = 'XOF', ), 
                    fromexternalfee = , 
                    fromdiscount = , 
                    frompromotion = , 
                    fromloyfee = , 
                    fromloyreward = , 
                    frompromotionrefund = , 
                    fromnote = '', 
                    fromavailablebalance = , 
                    fromtotalbalance = , 
                    fromcommittedbalance = , 
                    fromaccountholder = '', 
                    originalamount = , 
                    externalamount = , 
                    amount = , 
                    fromcouponvalue = , 
                    fromtaxes = , 
                    fromtaxesrefund = , 
                    to = '', 
                    toaccount = '', 
                    toamount = , 
                    tofee = , 
                    toexternalfee = , 
                    topromotion = , 
                    toloyfee = , 
                    toloyreward = , 
                    topromotionrefund = , 
                    todiscountrefund = , 
                    tomessage = '', 
                    toavailablebalance = , 
                    tototalbalance = , 
                    tocommittedbalance = , 
                    maininstructionid = '', 
                    instructionid = '', 
                    externaltransactionid = '', 
                    transactiontext = '', 
                    tofeerefund = , 
                    fromfeerefund = , 
                    toaccountholder = '', 
                    totaxes = , 
                    totaxesrefund = , 
                    fromfirstname = '', 
                    fromlastname = '', 
                    fromhandlerfirstname = '', 
                    fromhandlerlastname = '', 
                    tofirstname = '', 
                    tolastname = '', 
                    tohandlerfirstname = '', 
                    tohandlerlastname = '', 
                    fromposmsisdn = '', 
                    toposmsisdn = '', 
                    originaltransactionid = '', 
                    communicationchannel = '', 
                    externalserviceprovider = '', 
                    external_svc_prd_tran_id = '', 
                    from_ex_instru_prov_trans_id = '', 
                    to_ex_instru_prov_trans_id = '', 
                    from_ex_instru_acc_holder = '', 
                    to_ex_instru_acc_holder = '', 
                    fitype = '', ),
                loyalty_information = openapi_client.models.loyalty_balances.LoyaltyBalances(
                    generated_amount = openapi_client.models.money_type.MoneyType(
                        amount = 50.0, 
                        units = 'XOF', ), 
                    consumed_amount = openapi_client.models.money_type.MoneyType(
                        amount = 50.0, 
                        units = 'XOF', ), 
                    new_balance = , ),
                links = openapi_client.models.payment_response__links.PaymentResponse__Links(
                    self = openapi_client.models.payment_response__links_self.PaymentResponse__Links_Self(
                        href = 'https://host:port/payments/v1/12345', ), )
            )
        else:
            return ReverseTransactionHistory(
        )
        """

    def testReverseTransactionHistory(self):
        """Test ReverseTransactionHistory"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
