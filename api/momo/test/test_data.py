# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.data import Data

class TestData(unittest.TestCase):
    """Data unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Data:
        """Test Data
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Data`
        """
        model = Data()
        if include_optional:
            return Data(
                approval_id = '',
                transaction_fee = openapi_client.models.money_type.MoneyType(
                    amount = 50.0, 
                    units = 'XOF', ),
                discount = openapi_client.models.money_type.MoneyType(
                    amount = 50.0, 
                    units = 'XOF', ),
                new_balance = openapi_client.models.money_type.MoneyType(
                    amount = 50.0, 
                    units = 'XOF', ),
                payer_note = 'Manual Boost for RWC',
                status = 'Approved',
                correlator_id = 'c5f80cb8-dc8b-11ea-87d0-0242ac130003',
                status_date = '2020-08-12T11:04:53.668Z',
                additional_information = openapi_client.models.additional_information.AdditionalInformation(
                    name = 'BundleName', 
                    description = 'Voice_1111', ),
                meta_data = [
                    openapi_client.models.additional_information.AdditionalInformation(
                        name = 'BundleName', 
                        description = 'Voice_1111', )
                    ],
                loyalty_information = openapi_client.models.loyalty_balances.LoyaltyBalances(
                    generated_amount = openapi_client.models.money_type.MoneyType(
                        amount = 50.0, 
                        units = 'XOF', ), 
                    consumed_amount = openapi_client.models.money_type.MoneyType(
                        amount = 50.0, 
                        units = 'XOF', ), 
                    new_balance = , ),
                external_code = ''
            )
        else:
            return Data(
        )
        """

    def testData(self):
        """Test Data"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
