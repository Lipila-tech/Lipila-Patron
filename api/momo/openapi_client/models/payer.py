# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Payer(BaseModel):
    """
    The individual that performs the payment.
    """ # noqa: E501
    payer_id_type: Optional[StrictStr] = Field(default=None, description="Identifier Type of the Payer.", alias="payerIdType")
    payer_id: StrictStr = Field(description="The Payer identifier, can be a sending fri, an msisdn etc.", alias="payerId")
    payer_note: Optional[StrictStr] = Field(default=None, description="A descriptive note for sender transaction history,ex. a sender note", alias="payerNote")
    payer_name: Optional[StrictStr] = Field(default=None, description="Name of the payer", alias="payerName")
    payer_email: Optional[StrictStr] = Field(default=None, description="An optional email address of the payer or customer", alias="payerEmail")
    payer_ref: Optional[StrictStr] = Field(default=None, description="A reference to the payer", alias="payerRef")
    payer_surname: Optional[StrictStr] = Field(default=None, description="Surname of the payer", alias="payerSurname")
    include_payer_charges: Optional[StrictBool] = Field(default=None, description="A boolean value to add payment charges", alias="includePayerCharges")
    __properties: ClassVar[List[str]] = ["payerIdType", "payerId", "payerNote", "payerName", "payerEmail", "payerRef", "payerSurname", "includePayerCharges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payerIdType": obj.get("payerIdType"),
            "payerId": obj.get("payerId"),
            "payerNote": obj.get("payerNote"),
            "payerName": obj.get("payerName"),
            "payerEmail": obj.get("payerEmail"),
            "payerRef": obj.get("payerRef"),
            "payerSurname": obj.get("payerSurname"),
            "includePayerCharges": obj.get("includePayerCharges")
        })
        return _obj


