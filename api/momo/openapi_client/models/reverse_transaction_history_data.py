# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money_currency_type import MoneyCurrencyType
from typing import Optional, Set
from typing_extensions import Self

class ReverseTransactionHistoryData(BaseModel):
    """
    ReverseTransactionHistoryData
    """ # noqa: E501
    transactionstatus: Optional[StrictStr] = Field(default=None, description="SUCCESSFULL.")
    transfertype: Optional[StrictStr] = Field(default=None, description="TRANSFER.")
    startdate: Optional[StrictStr] = Field(default=None, description="Select transactions starting from this date and time.")
    commitdate: Optional[StrictStr] = Field(default=None, description="The date and time at which the transaction was completed.")
    fxrate: Optional[StrictStr] = Field(default=None, description="The foreign exchange rate.")
    externalfxrate: Optional[StrictStr] = Field(default=None, description="The external foreign exchange rate in an interoperability transfer.")
    initiatinguser: Optional[StrictStr] = Field(default=None, description="The execution ID of the user that initiated the transaction.")
    realuser: Optional[StrictStr] = Field(default=None, description="The execution ID of the real user that initiated the transaction.")
    reviewinguser: Optional[StrictStr] = Field(default=None, description="The execution ID of the user that reviewed the transaction.")
    initiatingaccountholder: Optional[StrictStr] = Field(default=None, description="The Identity of the account holder that initiated the transaction if it was initiated by an account holder.")
    realaccountholder: Optional[StrictStr] = Field(default=None, description="The Identity of the real account holder that is effected by the transaction if it was initiated by an account holder.")
    providercategory: Optional[StrictStr] = Field(default=None, description="The name of the provider category.")
    var_from: Optional[StrictStr] = Field(default=None, description="The sending user's default FRI.", alias="from")
    fromaccount: Optional[StrictStr] = Field(default=None, description="The sending account FRI.")
    fromamount: Optional[MoneyCurrencyType] = None
    fromfee: Optional[MoneyCurrencyType] = None
    fromexternalfee: Optional[MoneyCurrencyType] = None
    fromdiscount: Optional[MoneyCurrencyType] = None
    frompromotion: Optional[MoneyCurrencyType] = None
    fromloyfee: Optional[MoneyCurrencyType] = None
    fromloyreward: Optional[MoneyCurrencyType] = None
    frompromotionrefund: Optional[MoneyCurrencyType] = None
    fromnote: Optional[StrictStr] = Field(default=None, description="The sender's note..")
    fromavailablebalance: Optional[MoneyCurrencyType] = None
    fromtotalbalance: Optional[MoneyCurrencyType] = None
    fromcommittedbalance: Optional[MoneyCurrencyType] = None
    fromaccountholder: Optional[StrictStr] = Field(default=None, description="The identity of the sending account holder.")
    originalamount: Optional[MoneyCurrencyType] = None
    externalamount: Optional[MoneyCurrencyType] = None
    amount: Optional[MoneyCurrencyType] = None
    fromcouponvalue: Optional[MoneyCurrencyType] = None
    fromtaxes: Optional[MoneyCurrencyType] = None
    fromtaxesrefund: Optional[MoneyCurrencyType] = None
    to: Optional[StrictStr] = Field(default=None, description="The receiving user's FRI or the receiving account's FRI.")
    toaccount: Optional[StrictStr] = Field(default=None, description="The receiving account's FRI.")
    toamount: Optional[MoneyCurrencyType] = None
    tofee: Optional[MoneyCurrencyType] = None
    toexternalfee: Optional[MoneyCurrencyType] = None
    topromotion: Optional[MoneyCurrencyType] = None
    toloyfee: Optional[MoneyCurrencyType] = None
    toloyreward: Optional[MoneyCurrencyType] = None
    topromotionrefund: Optional[MoneyCurrencyType] = None
    todiscountrefund: Optional[MoneyCurrencyType] = None
    tomessage: Optional[StrictStr] = Field(default=None, description="The receiver's message.")
    toavailablebalance: Optional[MoneyCurrencyType] = None
    tototalbalance: Optional[MoneyCurrencyType] = None
    tocommittedbalance: Optional[MoneyCurrencyType] = None
    maininstructionid: Optional[StrictStr] = Field(default=None, description="The main instruction ID.")
    instructionid: Optional[StrictStr] = Field(default=None, description="The financial instruction ID..")
    externaltransactionid: Optional[StrictStr] = Field(default=None, description="External transaction ID for the operation..")
    transactiontext: Optional[StrictStr] = Field(default=None, description="Text describing the transaction..")
    tofeerefund: Optional[MoneyCurrencyType] = None
    fromfeerefund: Optional[MoneyCurrencyType] = None
    toaccountholder: Optional[StrictStr] = Field(default=None, description="The Identity of the receiving account holder.")
    totaxes: Optional[MoneyCurrencyType] = None
    totaxesrefund: Optional[MoneyCurrencyType] = None
    fromfirstname: Optional[StrictStr] = Field(default=None, description="The first name of the sender.")
    fromlastname: Optional[StrictStr] = Field(default=None, description="The last name of the sender.")
    fromhandlerfirstname: Optional[StrictStr] = Field(default=None, description="The first name of the handler on the sender side.")
    fromhandlerlastname: Optional[StrictStr] = Field(default=None, description="The last name of the handler on the sender side.")
    tofirstname: Optional[StrictStr] = Field(default=None, description="The first name of receiver.")
    tolastname: Optional[StrictStr] = Field(default=None, description="The last name of the receiver.")
    tohandlerfirstname: Optional[StrictStr] = Field(default=None, description="The first name of the handler on the receiver side.")
    tohandlerlastname: Optional[StrictStr] = Field(default=None, description="The last name of the handler on the receiver side.")
    fromposmsisdn: Optional[StrictStr] = Field(default=None, description="The point of sale msisdn of the sender.")
    toposmsisdn: Optional[StrictStr] = Field(default=None, description="The point of sale msisdn of the receiver.")
    originaltransactionid: Optional[StrictStr] = Field(default=None, description="The original transaction id..")
    communicationchannel: Optional[StrictStr] = Field(default=None, description="The communication channel..")
    externalserviceprovider: Optional[StrictStr] = Field(default=None, description="The external service provider that was involved in the transaction..")
    external_svc_prd_tran_id: Optional[StrictStr] = Field(default=None, description="The transaction ID generated by an external service provider. This field is only available when searching for a specific transaction by financialTransactionId or externalTransactionId.", alias="externalSvcPrdTranId")
    from_ex_instru_prov_trans_id: Optional[StrictStr] = Field(default=None, description="The external transaction identifier as provided by the external instrument provider if the sending FRI is an external instrument. This field is only available when searching for a specific transaction by financialTransactionId or externalTransactionId..", alias="fromExInstruProvTransId")
    to_ex_instru_prov_trans_id: Optional[StrictStr] = Field(default=None, description="The external transaction identifier as provided by the external instrument provider if the receiving FRI is an external instrument. This field is only available when searching for a specific transaction by financialTransactionId or externalTransactionId.", alias="toExInstruProvTransId")
    from_ex_instru_acc_holder: Optional[StrictStr] = Field(default=None, description="The external instrument provider account holder if the sending FRI is an external instrument. This field is only available when searching for a specific transaction by financialTransactionId or externalTransactionId.", alias="fromExInstruAccHolder")
    to_ex_instru_acc_holder: Optional[StrictStr] = Field(default=None, description="The external instrument provider account holder if the receiving FRI is an external instrument. This field is only available when searching for a specific transaction by financialTransactionId or externalTransactionId.", alias="toExInstruAccHolder")
    fitype: Optional[StrictStr] = Field(default=None, description="Shows the financial transaction type.")
    __properties: ClassVar[List[str]] = ["transactionstatus", "transfertype", "startdate", "commitdate", "fxrate", "externalfxrate", "initiatinguser", "realuser", "reviewinguser", "initiatingaccountholder", "realaccountholder", "providercategory", "from", "fromaccount", "fromamount", "fromfee", "fromexternalfee", "fromdiscount", "frompromotion", "fromloyfee", "fromloyreward", "frompromotionrefund", "fromnote", "fromavailablebalance", "fromtotalbalance", "fromcommittedbalance", "fromaccountholder", "originalamount", "externalamount", "amount", "fromcouponvalue", "fromtaxes", "fromtaxesrefund", "to", "toaccount", "toamount", "tofee", "toexternalfee", "topromotion", "toloyfee", "toloyreward", "topromotionrefund", "todiscountrefund", "tomessage", "toavailablebalance", "tototalbalance", "tocommittedbalance", "maininstructionid", "instructionid", "externaltransactionid", "transactiontext", "tofeerefund", "fromfeerefund", "toaccountholder", "totaxes", "totaxesrefund", "fromfirstname", "fromlastname", "fromhandlerfirstname", "fromhandlerlastname", "tofirstname", "tolastname", "tohandlerfirstname", "tohandlerlastname", "fromposmsisdn", "toposmsisdn", "originaltransactionid", "communicationchannel", "externalserviceprovider", "externalSvcPrdTranId", "fromExInstruProvTransId", "toExInstruProvTransId", "fromExInstruAccHolder", "toExInstruAccHolder", "fitype"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReverseTransactionHistoryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fromamount
        if self.fromamount:
            _dict['fromamount'] = self.fromamount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromfee
        if self.fromfee:
            _dict['fromfee'] = self.fromfee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromexternalfee
        if self.fromexternalfee:
            _dict['fromexternalfee'] = self.fromexternalfee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromdiscount
        if self.fromdiscount:
            _dict['fromdiscount'] = self.fromdiscount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frompromotion
        if self.frompromotion:
            _dict['frompromotion'] = self.frompromotion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromloyfee
        if self.fromloyfee:
            _dict['fromloyfee'] = self.fromloyfee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromloyreward
        if self.fromloyreward:
            _dict['fromloyreward'] = self.fromloyreward.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frompromotionrefund
        if self.frompromotionrefund:
            _dict['frompromotionrefund'] = self.frompromotionrefund.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromavailablebalance
        if self.fromavailablebalance:
            _dict['fromavailablebalance'] = self.fromavailablebalance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromtotalbalance
        if self.fromtotalbalance:
            _dict['fromtotalbalance'] = self.fromtotalbalance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromcommittedbalance
        if self.fromcommittedbalance:
            _dict['fromcommittedbalance'] = self.fromcommittedbalance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originalamount
        if self.originalamount:
            _dict['originalamount'] = self.originalamount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of externalamount
        if self.externalamount:
            _dict['externalamount'] = self.externalamount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromcouponvalue
        if self.fromcouponvalue:
            _dict['fromcouponvalue'] = self.fromcouponvalue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromtaxes
        if self.fromtaxes:
            _dict['fromtaxes'] = self.fromtaxes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromtaxesrefund
        if self.fromtaxesrefund:
            _dict['fromtaxesrefund'] = self.fromtaxesrefund.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toamount
        if self.toamount:
            _dict['toamount'] = self.toamount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tofee
        if self.tofee:
            _dict['tofee'] = self.tofee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toexternalfee
        if self.toexternalfee:
            _dict['toexternalfee'] = self.toexternalfee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of topromotion
        if self.topromotion:
            _dict['topromotion'] = self.topromotion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toloyfee
        if self.toloyfee:
            _dict['toloyfee'] = self.toloyfee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toloyreward
        if self.toloyreward:
            _dict['toloyreward'] = self.toloyreward.to_dict()
        # override the default output from pydantic by calling `to_dict()` of topromotionrefund
        if self.topromotionrefund:
            _dict['topromotionrefund'] = self.topromotionrefund.to_dict()
        # override the default output from pydantic by calling `to_dict()` of todiscountrefund
        if self.todiscountrefund:
            _dict['todiscountrefund'] = self.todiscountrefund.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toavailablebalance
        if self.toavailablebalance:
            _dict['toavailablebalance'] = self.toavailablebalance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tototalbalance
        if self.tototalbalance:
            _dict['tototalbalance'] = self.tototalbalance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tocommittedbalance
        if self.tocommittedbalance:
            _dict['tocommittedbalance'] = self.tocommittedbalance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tofeerefund
        if self.tofeerefund:
            _dict['tofeerefund'] = self.tofeerefund.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fromfeerefund
        if self.fromfeerefund:
            _dict['fromfeerefund'] = self.fromfeerefund.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totaxes
        if self.totaxes:
            _dict['totaxes'] = self.totaxes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totaxesrefund
        if self.totaxesrefund:
            _dict['totaxesrefund'] = self.totaxesrefund.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReverseTransactionHistoryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionstatus": obj.get("transactionstatus"),
            "transfertype": obj.get("transfertype"),
            "startdate": obj.get("startdate"),
            "commitdate": obj.get("commitdate"),
            "fxrate": obj.get("fxrate"),
            "externalfxrate": obj.get("externalfxrate"),
            "initiatinguser": obj.get("initiatinguser"),
            "realuser": obj.get("realuser"),
            "reviewinguser": obj.get("reviewinguser"),
            "initiatingaccountholder": obj.get("initiatingaccountholder"),
            "realaccountholder": obj.get("realaccountholder"),
            "providercategory": obj.get("providercategory"),
            "from": obj.get("from"),
            "fromaccount": obj.get("fromaccount"),
            "fromamount": MoneyCurrencyType.from_dict(obj["fromamount"]) if obj.get("fromamount") is not None else None,
            "fromfee": MoneyCurrencyType.from_dict(obj["fromfee"]) if obj.get("fromfee") is not None else None,
            "fromexternalfee": MoneyCurrencyType.from_dict(obj["fromexternalfee"]) if obj.get("fromexternalfee") is not None else None,
            "fromdiscount": MoneyCurrencyType.from_dict(obj["fromdiscount"]) if obj.get("fromdiscount") is not None else None,
            "frompromotion": MoneyCurrencyType.from_dict(obj["frompromotion"]) if obj.get("frompromotion") is not None else None,
            "fromloyfee": MoneyCurrencyType.from_dict(obj["fromloyfee"]) if obj.get("fromloyfee") is not None else None,
            "fromloyreward": MoneyCurrencyType.from_dict(obj["fromloyreward"]) if obj.get("fromloyreward") is not None else None,
            "frompromotionrefund": MoneyCurrencyType.from_dict(obj["frompromotionrefund"]) if obj.get("frompromotionrefund") is not None else None,
            "fromnote": obj.get("fromnote"),
            "fromavailablebalance": MoneyCurrencyType.from_dict(obj["fromavailablebalance"]) if obj.get("fromavailablebalance") is not None else None,
            "fromtotalbalance": MoneyCurrencyType.from_dict(obj["fromtotalbalance"]) if obj.get("fromtotalbalance") is not None else None,
            "fromcommittedbalance": MoneyCurrencyType.from_dict(obj["fromcommittedbalance"]) if obj.get("fromcommittedbalance") is not None else None,
            "fromaccountholder": obj.get("fromaccountholder"),
            "originalamount": MoneyCurrencyType.from_dict(obj["originalamount"]) if obj.get("originalamount") is not None else None,
            "externalamount": MoneyCurrencyType.from_dict(obj["externalamount"]) if obj.get("externalamount") is not None else None,
            "amount": MoneyCurrencyType.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "fromcouponvalue": MoneyCurrencyType.from_dict(obj["fromcouponvalue"]) if obj.get("fromcouponvalue") is not None else None,
            "fromtaxes": MoneyCurrencyType.from_dict(obj["fromtaxes"]) if obj.get("fromtaxes") is not None else None,
            "fromtaxesrefund": MoneyCurrencyType.from_dict(obj["fromtaxesrefund"]) if obj.get("fromtaxesrefund") is not None else None,
            "to": obj.get("to"),
            "toaccount": obj.get("toaccount"),
            "toamount": MoneyCurrencyType.from_dict(obj["toamount"]) if obj.get("toamount") is not None else None,
            "tofee": MoneyCurrencyType.from_dict(obj["tofee"]) if obj.get("tofee") is not None else None,
            "toexternalfee": MoneyCurrencyType.from_dict(obj["toexternalfee"]) if obj.get("toexternalfee") is not None else None,
            "topromotion": MoneyCurrencyType.from_dict(obj["topromotion"]) if obj.get("topromotion") is not None else None,
            "toloyfee": MoneyCurrencyType.from_dict(obj["toloyfee"]) if obj.get("toloyfee") is not None else None,
            "toloyreward": MoneyCurrencyType.from_dict(obj["toloyreward"]) if obj.get("toloyreward") is not None else None,
            "topromotionrefund": MoneyCurrencyType.from_dict(obj["topromotionrefund"]) if obj.get("topromotionrefund") is not None else None,
            "todiscountrefund": MoneyCurrencyType.from_dict(obj["todiscountrefund"]) if obj.get("todiscountrefund") is not None else None,
            "tomessage": obj.get("tomessage"),
            "toavailablebalance": MoneyCurrencyType.from_dict(obj["toavailablebalance"]) if obj.get("toavailablebalance") is not None else None,
            "tototalbalance": MoneyCurrencyType.from_dict(obj["tototalbalance"]) if obj.get("tototalbalance") is not None else None,
            "tocommittedbalance": MoneyCurrencyType.from_dict(obj["tocommittedbalance"]) if obj.get("tocommittedbalance") is not None else None,
            "maininstructionid": obj.get("maininstructionid"),
            "instructionid": obj.get("instructionid"),
            "externaltransactionid": obj.get("externaltransactionid"),
            "transactiontext": obj.get("transactiontext"),
            "tofeerefund": MoneyCurrencyType.from_dict(obj["tofeerefund"]) if obj.get("tofeerefund") is not None else None,
            "fromfeerefund": MoneyCurrencyType.from_dict(obj["fromfeerefund"]) if obj.get("fromfeerefund") is not None else None,
            "toaccountholder": obj.get("toaccountholder"),
            "totaxes": MoneyCurrencyType.from_dict(obj["totaxes"]) if obj.get("totaxes") is not None else None,
            "totaxesrefund": MoneyCurrencyType.from_dict(obj["totaxesrefund"]) if obj.get("totaxesrefund") is not None else None,
            "fromfirstname": obj.get("fromfirstname"),
            "fromlastname": obj.get("fromlastname"),
            "fromhandlerfirstname": obj.get("fromhandlerfirstname"),
            "fromhandlerlastname": obj.get("fromhandlerlastname"),
            "tofirstname": obj.get("tofirstname"),
            "tolastname": obj.get("tolastname"),
            "tohandlerfirstname": obj.get("tohandlerfirstname"),
            "tohandlerlastname": obj.get("tohandlerlastname"),
            "fromposmsisdn": obj.get("fromposmsisdn"),
            "toposmsisdn": obj.get("toposmsisdn"),
            "originaltransactionid": obj.get("originaltransactionid"),
            "communicationchannel": obj.get("communicationchannel"),
            "externalserviceprovider": obj.get("externalserviceprovider"),
            "externalSvcPrdTranId": obj.get("externalSvcPrdTranId"),
            "fromExInstruProvTransId": obj.get("fromExInstruProvTransId"),
            "toExInstruProvTransId": obj.get("toExInstruProvTransId"),
            "fromExInstruAccHolder": obj.get("fromExInstruAccHolder"),
            "toExInstruAccHolder": obj.get("toExInstruAccHolder"),
            "fitype": obj.get("fitype")
        })
        return _obj


