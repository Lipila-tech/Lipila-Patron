# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account import Account
from openapi_client.models.bank_account_debit import BankAccountDebit
from openapi_client.models.bank_account_transfer import BankAccountTransfer
from openapi_client.models.bank_card import BankCard
from openapi_client.models.bucket import Bucket
from openapi_client.models.digital_wallet import DigitalWallet
from openapi_client.models.invoice_method import InvoiceMethod
from openapi_client.models.loyalty_account import LoyaltyAccount
from openapi_client.models.tokenized_card import TokenizedCard
from openapi_client.models.voucher import Voucher
from typing import Optional, Set
from typing_extensions import Self

class PaymentMethodTypeDetails(BaseModel):
    """
    Definition of the payment method. Its content depends on the type field.
    """ # noqa: E501
    bank_card: Optional[BankCard] = Field(default=None, alias="bankCard")
    tokenized_card: Optional[TokenizedCard] = Field(default=None, alias="tokenizedCard")
    bank_account_debit: Optional[BankAccountDebit] = Field(default=None, alias="bankAccountDebit")
    bank_account_transfer: Optional[BankAccountTransfer] = Field(default=None, alias="bankAccountTransfer")
    account: Optional[Account] = None
    loyalty_account: Optional[LoyaltyAccount] = Field(default=None, alias="loyaltyAccount")
    bucket: Optional[Bucket] = None
    voucher: Optional[Voucher] = None
    digital_wallet: Optional[DigitalWallet] = Field(default=None, alias="digitalWallet")
    invoice: Optional[InvoiceMethod] = None
    __properties: ClassVar[List[str]] = ["bankCard", "tokenizedCard", "bankAccountDebit", "bankAccountTransfer", "account", "loyaltyAccount", "bucket", "voucher", "digitalWallet", "invoice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentMethodTypeDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bank_card
        if self.bank_card:
            _dict['bankCard'] = self.bank_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tokenized_card
        if self.tokenized_card:
            _dict['tokenizedCard'] = self.tokenized_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account_debit
        if self.bank_account_debit:
            _dict['bankAccountDebit'] = self.bank_account_debit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account_transfer
        if self.bank_account_transfer:
            _dict['bankAccountTransfer'] = self.bank_account_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_account
        if self.loyalty_account:
            _dict['loyaltyAccount'] = self.loyalty_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bucket
        if self.bucket:
            _dict['bucket'] = self.bucket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voucher
        if self.voucher:
            _dict['voucher'] = self.voucher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of digital_wallet
        if self.digital_wallet:
            _dict['digitalWallet'] = self.digital_wallet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentMethodTypeDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bankCard": BankCard.from_dict(obj["bankCard"]) if obj.get("bankCard") is not None else None,
            "tokenizedCard": TokenizedCard.from_dict(obj["tokenizedCard"]) if obj.get("tokenizedCard") is not None else None,
            "bankAccountDebit": BankAccountDebit.from_dict(obj["bankAccountDebit"]) if obj.get("bankAccountDebit") is not None else None,
            "bankAccountTransfer": BankAccountTransfer.from_dict(obj["bankAccountTransfer"]) if obj.get("bankAccountTransfer") is not None else None,
            "account": Account.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "loyaltyAccount": LoyaltyAccount.from_dict(obj["loyaltyAccount"]) if obj.get("loyaltyAccount") is not None else None,
            "bucket": Bucket.from_dict(obj["bucket"]) if obj.get("bucket") is not None else None,
            "voucher": Voucher.from_dict(obj["voucher"]) if obj.get("voucher") is not None else None,
            "digitalWallet": DigitalWallet.from_dict(obj["digitalWallet"]) if obj.get("digitalWallet") is not None else None,
            "invoice": InvoiceMethod.from_dict(obj["invoice"]) if obj.get("invoice") is not None else None
        })
        return _obj


