# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.charges_object import ChargesObject
from openapi_client.models.customer_object import CustomerObject
from typing import Optional, Set
from typing_extensions import Self

class PaymentTransactionStatusData(BaseModel):
    """
    PaymentTransactionStatusData
    """ # noqa: E501
    financial_transaction_id: Optional[StrictStr] = Field(default=None, description="The financial transaction ID. Generated by the back-end system.", alias="financialTransactionId")
    status: Optional[StrictStr] = Field(default=None, description="Payment Status.")
    request_type: Optional[StrictStr] = Field(default=None, description="Request Type.", alias="requestType")
    fulfillment_status: Optional[StrictStr] = Field(default=None, description="The financial transaction fullfilment status.", alias="fulfillmentStatus")
    transaction_ref_parent: Optional[StrictStr] = Field(default=None, description="The financial transaction reference parent.", alias="transactionRefParent")
    transaction_description: Optional[StrictStr] = Field(default=None, description="The financial transaction description.", alias="transactionDescription")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The financial transactional amount.")
    var_date: Optional[StrictStr] = Field(default=None, description="payment date", alias="date")
    channel: Optional[StrictStr] = Field(default=None, description="Channel of the payment request eg. USSD")
    product: Optional[StrictStr] = Field(default=None, description="A product id, name etc.")
    description: Optional[StrictStr] = Field(default=None, description="can be a payer note, a merchant identifier ie. merchantId etc.")
    customer: Optional[CustomerObject] = None
    charges: Optional[ChargesObject] = None
    __properties: ClassVar[List[str]] = ["financialTransactionId", "status", "requestType", "fulfillmentStatus", "transactionRefParent", "transactionDescription", "amount", "date", "channel", "product", "description", "customer", "charges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentTransactionStatusData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charges
        if self.charges:
            _dict['charges'] = self.charges.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentTransactionStatusData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "financialTransactionId": obj.get("financialTransactionId"),
            "status": obj.get("status"),
            "requestType": obj.get("requestType"),
            "fulfillmentStatus": obj.get("fulfillmentStatus"),
            "transactionRefParent": obj.get("transactionRefParent"),
            "transactionDescription": obj.get("transactionDescription"),
            "amount": obj.get("amount"),
            "date": obj.get("date"),
            "channel": obj.get("channel"),
            "product": obj.get("product"),
            "description": obj.get("description"),
            "customer": CustomerObject.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "charges": ChargesObject.from_dict(obj["charges"]) if obj.get("charges") is not None else None
        })
        return _obj


