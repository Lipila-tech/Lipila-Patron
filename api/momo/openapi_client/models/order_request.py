# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money_type import MoneyType
from openapi_client.models.payer import Payer
from typing import Optional, Set
from typing_extensions import Self

class OrderRequest(BaseModel):
    """
    Order Request details.
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="Source system (Channel) identifier")
    quote_id: Optional[StrictStr] = Field(default=None, description="The ID of the quote used.", alias="quoteId")
    description: Optional[StrictStr] = Field(default=None, description="Text describing the contents of the payment.")
    authentication_type: Optional[StrictStr] = Field(default=None, description="This field will have the authentication type that the channel prefers to have for making a payment. Pass it as \"Query Payment\" incase if you don't need any back update notification about payment. Possible values are [Query Payment, Inline Auth, Notification]", alias="authenticationType")
    callback_url: Optional[StrictStr] = Field(default=None, description="This field will have the call back URL to notify the payment status to the channels. This field should only be passed if authenticationType is Notification. The source channel initiating the order should give the notifyURL", alias="callbackUrl")
    redirect_url: Optional[StrictStr] = Field(default=None, description="This field will be the self service channel web page URL where the user is supposed to be once the payment is done on payportal", alias="redirectUrl")
    delivery_method: Optional[StrictStr] = Field(default=None, description="Method through which link need to be shared. In case of \"SMS\" URL is sent via SMS. In case of \"Paylink\" URL will be sent part of response. Possible values are [SMS, Payweb, Email, Paylink]", alias="deliveryMethod")
    payer: Optional[Payer] = None
    paymentmethods: Optional[List[StrictStr]] = None
    total_amount: Optional[MoneyType] = Field(default=None, alias="totalAmount")
    item_details: Optional[List[object]] = Field(default=None, alias="itemDetails")
    __properties: ClassVar[List[str]] = []

    @field_validator('paymentmethods')
    def paymentmethods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Card Payment', 'MoMo', 'Airtime', 'Loyalty', 'Bank EFT', 'Add to Bill']):
                raise ValueError("each list item must be one of ('Card Payment', 'MoMo', 'Airtime', 'Loyalty', 'Bank EFT', 'Add to Bill')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
        })
        return _obj


