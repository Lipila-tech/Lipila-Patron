# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_information import AdditionalInformation
from openapi_client.models.calling_system_enum import CallingSystemEnum
from openapi_client.models.money_type import MoneyType
from openapi_client.models.payee import Payee
from openapi_client.models.payer import Payer
from openapi_client.models.payment_method import PaymentMethod
from openapi_client.models.target_system_enum import TargetSystemEnum
from openapi_client.models.transaction_type_enum import TransactionTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class PaymentRequest(BaseModel):
    """
    Payment Request details.
    """ # noqa: E501
    correlator_id: StrictStr = Field(description="Unique identifier in the client for the payment in case it is needed to correlate, a trace id associated with the caller", alias="correlatorId")
    payment_date: Optional[datetime] = Field(default=None, description="Date when the payment was performed.", alias="paymentDate")
    name: Optional[StrictStr] = Field(default=None, description="Screen name of the payment.")
    calling_system: Optional[CallingSystemEnum] = Field(default=None, alias="callingSystem")
    transaction_type: TransactionTypeEnum = Field(alias="transactionType")
    target_system: Optional[TargetSystemEnum] = Field(default=None, alias="targetSystem")
    callback_url: StrictStr = Field(description="The callback URL.", alias="callbackURL")
    quote_id: Optional[StrictStr] = Field(default=None, description="The ID of the quote used, a terminal id associated with the caller.", alias="quoteId")
    channel: Optional[StrictStr] = Field(default=None, description="The channel used to perform the payment operation or just the channel itself with just its name.")
    description: Optional[StrictStr] = Field(default=None, description="Text describing the contents of the payment.")
    authorization_code: Optional[StrictStr] = Field(default=None, description="Authorization code retrieved from an external payment gateway that could be used for conciliation.", alias="authorizationCode")
    fee_bearer: Optional[StrictStr] = Field(default=None, description="Who bears a charge for a particular transaction , whether a Payer or Payee", alias="feeBearer")
    amount: Optional[MoneyType] = None
    tax_amount: Optional[MoneyType] = Field(default=None, alias="taxAmount")
    total_amount: MoneyType = Field(alias="totalAmount")
    payer: Optional[Payer] = None
    payee: Optional[List[Payee]] = None
    payment_method: PaymentMethod = Field(alias="paymentMethod")
    status: Optional[StrictStr] = Field(default=None, description="Status of the payment method.")
    status_date: Optional[datetime] = Field(default=None, description="Time the status of the payment method changed.", alias="statusDate")
    additional_information: Optional[List[AdditionalInformation]] = Field(default=None, alias="additionalInformation")
    segment: Optional[StrictStr] = Field(default=None, description="Segment of the customer. Forexample, subscriber,agent, merchant, admin depending on the type of customer whome the operation is being performed against.")
    __properties: ClassVar[List[str]] = ["correlatorId", "paymentDate", "name", "callingSystem", "transactionType", "targetSystem", "callbackURL", "quoteId", "channel", "description", "authorizationCode", "feeBearer", "amount", "taxAmount", "totalAmount", "payer", "payee", "paymentMethod", "status", "statusDate", "additionalInformation", "segment"]

    @field_validator('fee_bearer')
    def fee_bearer_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Payer', 'Payee']):
            raise ValueError("must be one of enum values ('Payer', 'Payee')")
        return value

    @field_validator('segment')
    def segment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['subscriber', 'agent', 'merchant', 'admin']):
            raise ValueError("must be one of enum values ('subscriber', 'agent', 'merchant', 'admin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_amount
        if self.tax_amount:
            _dict['taxAmount'] = self.tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['totalAmount'] = self.total_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict['payer'] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payee (list)
        _items = []
        if self.payee:
            for _item_payee in self.payee:
                if _item_payee:
                    _items.append(_item_payee.to_dict())
            _dict['payee'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_information (list)
        _items = []
        if self.additional_information:
            for _item_additional_information in self.additional_information:
                if _item_additional_information:
                    _items.append(_item_additional_information.to_dict())
            _dict['additionalInformation'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "correlatorId": obj.get("correlatorId"),
            "paymentDate": obj.get("paymentDate"),
            "name": obj.get("name"),
            "callingSystem": obj.get("callingSystem"),
            "transactionType": obj.get("transactionType") if obj.get("transactionType") is not None else TransactionTypeEnum.PAYMENT,
            "targetSystem": obj.get("targetSystem"),
            "callbackURL": obj.get("callbackURL"),
            "quoteId": obj.get("quoteId"),
            "channel": obj.get("channel"),
            "description": obj.get("description"),
            "authorizationCode": obj.get("authorizationCode"),
            "feeBearer": obj.get("feeBearer"),
            "amount": MoneyType.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "taxAmount": MoneyType.from_dict(obj["taxAmount"]) if obj.get("taxAmount") is not None else None,
            "totalAmount": MoneyType.from_dict(obj["totalAmount"]) if obj.get("totalAmount") is not None else None,
            "payer": Payer.from_dict(obj["payer"]) if obj.get("payer") is not None else None,
            "payee": [Payee.from_dict(_item) for _item in obj["payee"]] if obj.get("payee") is not None else None,
            "paymentMethod": PaymentMethod.from_dict(obj["paymentMethod"]) if obj.get("paymentMethod") is not None else None,
            "status": obj.get("status"),
            "statusDate": obj.get("statusDate"),
            "additionalInformation": [AdditionalInformation.from_dict(_item) for _item in obj["additionalInformation"]] if obj.get("additionalInformation") is not None else None,
            "segment": obj.get("segment")
        })
        return _obj


