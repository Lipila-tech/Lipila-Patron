# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_ref import AccountRef
from openapi_client.models.money import Money
from openapi_client.models.payment_item import PaymentItem
from openapi_client.models.payment_record import PaymentRecord
from openapi_client.models.related_party import RelatedParty
from typing import Optional, Set
from typing_extensions import Self

class PaymentHistoryResponseData(BaseModel):
    """
    PaymentHistoryResponseData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of Payment")
    href: Optional[StrictStr] = Field(default=None, description="Hypertext Reference of the Payment")
    authorization_code: Optional[StrictStr] = Field(default=None, description="Authorization code retrieved from an external payment gateway that could be used for conciliation", alias="authorizationCode")
    correlator_id: Optional[StrictStr] = Field(default=None, description="Unique identifier in the client for the payment in case it is needed to correlate", alias="correlatorId")
    description: Optional[StrictStr] = Field(default=None, description="Text describing the contents of the payment")
    name: Optional[StrictStr] = Field(default=None, description="Screen name of the payment")
    payment_date: Optional[datetime] = Field(default=None, description="Date when the payment was performed", alias="paymentDate")
    status: Optional[StrictStr] = Field(default=None, description="Status of the payment")
    status_date: Optional[datetime] = Field(default=None, description="Date when the status was recorded", alias="statusDate")
    account: Optional[AccountRef] = None
    amount: Optional[Money] = None
    related_party: Optional[RelatedParty] = Field(default=None, alias="relatedParty")
    payer: Optional[RelatedParty] = None
    payment_item: Optional[List[PaymentItem]] = Field(default=None, alias="paymentItem")
    total_amount: Optional[Money] = Field(default=None, alias="totalAmount")
    type: Optional[StrictStr] = Field(default=None, description="When sub-classing, this defines the sub-class entity name")
    callback_url: Optional[StrictStr] = Field(default=None, description="Callback URL", alias="callbackUrl")
    payment_records: Optional[List[PaymentRecord]] = Field(default=None, alias="paymentRecords")
    __properties: ClassVar[List[str]] = ["id", "href", "authorizationCode", "correlatorId", "description", "name", "paymentDate", "status", "statusDate", "account", "amount", "relatedParty", "payer", "paymentItem", "totalAmount", "type", "callbackUrl", "paymentRecords"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentHistoryResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related_party
        if self.related_party:
            _dict['relatedParty'] = self.related_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict['payer'] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_item (list)
        _items = []
        if self.payment_item:
            for _item_payment_item in self.payment_item:
                if _item_payment_item:
                    _items.append(_item_payment_item.to_dict())
            _dict['paymentItem'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['totalAmount'] = self.total_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_records (list)
        _items = []
        if self.payment_records:
            for _item_payment_records in self.payment_records:
                if _item_payment_records:
                    _items.append(_item_payment_records.to_dict())
            _dict['paymentRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentHistoryResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "href": obj.get("href"),
            "authorizationCode": obj.get("authorizationCode"),
            "correlatorId": obj.get("correlatorId"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "paymentDate": obj.get("paymentDate"),
            "status": obj.get("status"),
            "statusDate": obj.get("statusDate"),
            "account": AccountRef.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "amount": Money.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "relatedParty": RelatedParty.from_dict(obj["relatedParty"]) if obj.get("relatedParty") is not None else None,
            "payer": RelatedParty.from_dict(obj["payer"]) if obj.get("payer") is not None else None,
            "paymentItem": [PaymentItem.from_dict(_item) for _item in obj["paymentItem"]] if obj.get("paymentItem") is not None else None,
            "totalAmount": Money.from_dict(obj["totalAmount"]) if obj.get("totalAmount") is not None else None,
            "type": obj.get("type"),
            "callbackUrl": obj.get("callbackUrl"),
            "paymentRecords": [PaymentRecord.from_dict(_item) for _item in obj["paymentRecords"]] if obj.get("paymentRecords") is not None else None
        })
        return _obj


