# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Error(BaseModel):
    """
    Error
    """ # noqa: E501
    status_code: StrictStr = Field(description="This is the MADAPI Canonical Error Code (it is 4 characters long and it is not the HTTP Status Code which is 3 characters long). Back-end system errors are mapped to specific canonical error codes which are returned. More information on these mappings can be found on the MADAPI Confluence Page 'Response Codes'", alias="statusCode")
    status_message: StrictStr = Field(description="More details and corrective actions related to the error which can be shown to a client", alias="statusMessage")
    support_message: Optional[StrictStr] = Field(default=None, description="Internal message meant for consumers of the API to troubleshoot the error (could possible include the back-end system error code in the message if it would be useful)", alias="supportMessage")
    transaction_id: Optional[StrictStr] = Field(default=None, description="This is the same transactionId that is sent in the request", alias="transactionId")
    timestamp: Optional[datetime] = Field(default=None, description="Timestamp that the error occurred")
    sequence_no: Optional[StrictStr] = Field(default=None, description="A unique id for tracing all requests", alias="sequenceNo")
    path: Optional[StrictStr] = Field(default=None, description="The path that caused the error")
    method: Optional[StrictStr] = Field(default=None, description="The HTTP method type that was used")
    __properties: ClassVar[List[str]] = ["statusCode", "statusMessage", "supportMessage", "transactionId", "timestamp", "sequenceNo", "path", "method"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Error from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "statusCode": obj.get("statusCode"),
            "statusMessage": obj.get("statusMessage"),
            "supportMessage": obj.get("supportMessage"),
            "transactionId": obj.get("transactionId"),
            "timestamp": obj.get("timestamp"),
            "sequenceNo": obj.get("sequenceNo"),
            "path": obj.get("path"),
            "method": obj.get("method")
        })
        return _obj


