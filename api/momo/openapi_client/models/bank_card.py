# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BankCard(BaseModel):
    """
    Detailed information for a bank card.
    """ # noqa: E501
    brand: Optional[StrictStr] = Field(default=None, description="Card brand. e.g. Visa, MasterCard, AmericanExpress.")
    type: Optional[StrictStr] = Field(default=None, description="Type of card. e.g. Credit, Debit.")
    card_number: Optional[StrictStr] = Field(default=None, description="Credit card number.", alias="cardNumber")
    expiration_date: Optional[datetime] = Field(default=None, description="Expiration date of the card.", alias="expirationDate")
    cvv: Optional[StrictStr] = Field(default=None, description="Security Code of the card. e.g. CCV, CCV2.")
    last_four_digits: Optional[StrictStr] = Field(default=None, description="Last four digits of the credit card.", alias="lastFourDigits")
    name_on_card: Optional[StrictStr] = Field(default=None, description="Name on the card.", alias="nameOnCard")
    bank: Optional[StrictStr] = Field(default=None, description="Bank that issued the card.")
    pin: Optional[StrictStr] = Field(default=None, description="Customer pin created when tokenizing the card")
    __properties: ClassVar[List[str]] = ["brand", "type", "cardNumber", "expirationDate", "cvv", "lastFourDigits", "nameOnCard", "bank", "pin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "type": obj.get("type"),
            "cardNumber": obj.get("cardNumber"),
            "expirationDate": obj.get("expirationDate"),
            "cvv": obj.get("cvv"),
            "lastFourDigits": obj.get("lastFourDigits"),
            "nameOnCard": obj.get("nameOnCard"),
            "bank": obj.get("bank"),
            "pin": obj.get("pin")
        })
        return _obj


