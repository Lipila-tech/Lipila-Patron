# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InvoiceMethod(BaseModel):
    """
    Detailed information for an invoice
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="This is the Id of the invoice")
    type: Optional[StrictStr] = Field(default=None, description="Type of the invoice being paid for")
    frequency: Optional[StrictStr] = Field(default=None, description="This is the frequency of a reccuring transaction")
    start_date: Optional[StrictStr] = Field(default=None, description="This is the start date of a reccuring transaction", alias="startDate")
    end_date: Optional[StrictStr] = Field(default=None, description="This is the end date of a reccuring transaction", alias="endDate")
    retry_on_fail: Optional[StrictBool] = Field(default=None, description="A boolean to showing if the transaction should be retried on fail or not.", alias="retryOnFail")
    deactivate_on_fail: Optional[StrictStr] = Field(default=None, description="A boolean to showing if the transaction should be deactivated on fail or not.", alias="deactivateOnFail")
    callback_url: Optional[StrictStr] = Field(default=None, description="The url to be invoked for callbacks", alias="callbackUrl")
    retry_run: Optional[StrictStr] = Field(default=None, description="This is the retry run", alias="retryRun")
    retry_frequency: Optional[StrictStr] = Field(default=None, description="The retry frequencies", alias="retryFrequency")
    __properties: ClassVar[List[str]] = ["id", "type", "frequency", "startDate", "endDate", "retryOnFail", "deactivateOnFail", "callbackUrl", "retryRun", "retryFrequency"]

    @field_validator('frequency')
    def frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['on_call', 'once', 'hourly', 'daily', 'weekly', 'every_[1-366]d']):
            raise ValueError("must be one of enum values ('on_call', 'once', 'hourly', 'daily', 'weekly', 'every_[1-366]d')")
        return value

    @field_validator('retry_frequency')
    def retry_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['once', 'hourly', 'daily']):
            raise ValueError("must be one of enum values ('once', 'hourly', 'daily')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "frequency": obj.get("frequency"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "retryOnFail": obj.get("retryOnFail"),
            "deactivateOnFail": obj.get("deactivateOnFail"),
            "callbackUrl": obj.get("callbackUrl"),
            "retryRun": obj.get("retryRun"),
            "retryFrequency": obj.get("retryFrequency")
        })
        return _obj


