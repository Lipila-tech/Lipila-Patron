# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.payment_record_details import PaymentRecordDetails
from openapi_client.models.payment_record_originator_amount import PaymentRecordOriginatorAmount
from typing import Optional, Set
from typing_extensions import Self

class PaymentRecord(BaseModel):
    """
    PaymentRecord
    """ # noqa: E501
    payment_date: Optional[StrictStr] = Field(default=None, alias="paymentDate")
    description: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    fulfillment_status: Optional[StrictStr] = Field(default=None, alias="fulfillmentStatus")
    details: Optional[PaymentRecordDetails] = None
    payment_id: Optional[StrictStr] = Field(default=None, alias="paymentId")
    payment_type: Optional[StrictStr] = Field(default=None, alias="paymentType")
    commit_date: Optional[StrictStr] = Field(default=None, alias="commitDate")
    fx_rate: Optional[StrictStr] = Field(default=None, alias="fxRate")
    initiating_user: Optional[StrictStr] = Field(default=None, alias="initiatingUser")
    real_user: Optional[StrictStr] = Field(default=None, alias="realUser")
    initiating_account_holder: Optional[StrictStr] = Field(default=None, alias="initiatingAccountHolder")
    real_account_holder: Optional[StrictStr] = Field(default=None, alias="realAccountHolder")
    originator: Optional[StrictStr] = None
    originator_account: Optional[StrictStr] = Field(default=None, alias="originatorAccount")
    main_instruction_id: Optional[StrictStr] = Field(default=None, alias="mainInstructionId")
    instruction_id: Optional[StrictStr] = Field(default=None, alias="instructionId")
    transaction_id: Optional[StrictStr] = Field(default=None, alias="transactionId")
    destination_account_holder: Optional[StrictStr] = Field(default=None, alias="destinationAccountHolder")
    originator_first_name: Optional[StrictStr] = Field(default=None, alias="originatorFirstName")
    originator_last_name: Optional[StrictStr] = Field(default=None, alias="originatorLastName")
    originator_handler_first_name: Optional[StrictStr] = Field(default=None, alias="originatorHandlerFirstName")
    originator_handler_last_name: Optional[StrictStr] = Field(default=None, alias="originatorHandlerLastName")
    destination_first_name: Optional[StrictStr] = Field(default=None, alias="destinationFirstName")
    destination_last_name: Optional[StrictStr] = Field(default=None, alias="destinationLastName")
    destination_handler_first_name: Optional[StrictStr] = Field(default=None, alias="destinationHandlerFirstName")
    destination_handler_last_name: Optional[StrictStr] = Field(default=None, alias="destinationHandlerLastName")
    channel: Optional[StrictStr] = None
    originator_account_holder: Optional[StrictStr] = Field(default=None, alias="originatorAccountHolder")
    destination: Optional[StrictStr] = None
    destination_account: Optional[StrictStr] = Field(default=None, alias="destinationAccount")
    originator_amount: Optional[PaymentRecordOriginatorAmount] = Field(default=None, alias="originatorAmount")
    originator_fee: Optional[PaymentRecordOriginatorAmount] = Field(default=None, alias="originatorFee")
    original_amount: Optional[PaymentRecordOriginatorAmount] = Field(default=None, alias="originalAmount")
    amount: Optional[PaymentRecordOriginatorAmount] = None
    destination_amount: Optional[PaymentRecordOriginatorAmount] = Field(default=None, alias="destinationAmount")
    destination_fee: Optional[PaymentRecordOriginatorAmount] = Field(default=None, alias="destinationFee")
    destination_available_balance: Optional[PaymentRecordOriginatorAmount] = Field(default=None, alias="destinationAvailableBalance")
    destination_total_balance: Optional[PaymentRecordOriginatorAmount] = Field(default=None, alias="destinationTotalBalance")
    destination_committed_balance: Optional[PaymentRecordOriginatorAmount] = Field(default=None, alias="destinationCommittedBalance")
    __properties: ClassVar[List[str]] = ["paymentDate", "description", "status", "fulfillmentStatus", "details", "paymentId", "paymentType", "commitDate", "fxRate", "initiatingUser", "realUser", "initiatingAccountHolder", "realAccountHolder", "originator", "originatorAccount", "mainInstructionId", "instructionId", "transactionId", "destinationAccountHolder", "originatorFirstName", "originatorLastName", "originatorHandlerFirstName", "originatorHandlerLastName", "destinationFirstName", "destinationLastName", "destinationHandlerFirstName", "destinationHandlerLastName", "channel", "originatorAccountHolder", "destination", "destinationAccount", "originatorAmount", "originatorFee", "originalAmount", "amount", "destinationAmount", "destinationFee", "destinationAvailableBalance", "destinationTotalBalance", "destinationCommittedBalance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originator_amount
        if self.originator_amount:
            _dict['originatorAmount'] = self.originator_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originator_fee
        if self.originator_fee:
            _dict['originatorFee'] = self.originator_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_amount
        if self.original_amount:
            _dict['originalAmount'] = self.original_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_amount
        if self.destination_amount:
            _dict['destinationAmount'] = self.destination_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_fee
        if self.destination_fee:
            _dict['destinationFee'] = self.destination_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_available_balance
        if self.destination_available_balance:
            _dict['destinationAvailableBalance'] = self.destination_available_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_total_balance
        if self.destination_total_balance:
            _dict['destinationTotalBalance'] = self.destination_total_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_committed_balance
        if self.destination_committed_balance:
            _dict['destinationCommittedBalance'] = self.destination_committed_balance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paymentDate": obj.get("paymentDate"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "fulfillmentStatus": obj.get("fulfillmentStatus"),
            "details": PaymentRecordDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "paymentId": obj.get("paymentId"),
            "paymentType": obj.get("paymentType"),
            "commitDate": obj.get("commitDate"),
            "fxRate": obj.get("fxRate"),
            "initiatingUser": obj.get("initiatingUser"),
            "realUser": obj.get("realUser"),
            "initiatingAccountHolder": obj.get("initiatingAccountHolder"),
            "realAccountHolder": obj.get("realAccountHolder"),
            "originator": obj.get("originator"),
            "originatorAccount": obj.get("originatorAccount"),
            "mainInstructionId": obj.get("mainInstructionId"),
            "instructionId": obj.get("instructionId"),
            "transactionId": obj.get("transactionId"),
            "destinationAccountHolder": obj.get("destinationAccountHolder"),
            "originatorFirstName": obj.get("originatorFirstName"),
            "originatorLastName": obj.get("originatorLastName"),
            "originatorHandlerFirstName": obj.get("originatorHandlerFirstName"),
            "originatorHandlerLastName": obj.get("originatorHandlerLastName"),
            "destinationFirstName": obj.get("destinationFirstName"),
            "destinationLastName": obj.get("destinationLastName"),
            "destinationHandlerFirstName": obj.get("destinationHandlerFirstName"),
            "destinationHandlerLastName": obj.get("destinationHandlerLastName"),
            "channel": obj.get("channel"),
            "originatorAccountHolder": obj.get("originatorAccountHolder"),
            "destination": obj.get("destination"),
            "destinationAccount": obj.get("destinationAccount"),
            "originatorAmount": PaymentRecordOriginatorAmount.from_dict(obj["originatorAmount"]) if obj.get("originatorAmount") is not None else None,
            "originatorFee": PaymentRecordOriginatorAmount.from_dict(obj["originatorFee"]) if obj.get("originatorFee") is not None else None,
            "originalAmount": PaymentRecordOriginatorAmount.from_dict(obj["originalAmount"]) if obj.get("originalAmount") is not None else None,
            "amount": PaymentRecordOriginatorAmount.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "destinationAmount": PaymentRecordOriginatorAmount.from_dict(obj["destinationAmount"]) if obj.get("destinationAmount") is not None else None,
            "destinationFee": PaymentRecordOriginatorAmount.from_dict(obj["destinationFee"]) if obj.get("destinationFee") is not None else None,
            "destinationAvailableBalance": PaymentRecordOriginatorAmount.from_dict(obj["destinationAvailableBalance"]) if obj.get("destinationAvailableBalance") is not None else None,
            "destinationTotalBalance": PaymentRecordOriginatorAmount.from_dict(obj["destinationTotalBalance"]) if obj.get("destinationTotalBalance") is not None else None,
            "destinationCommittedBalance": PaymentRecordOriginatorAmount.from_dict(obj["destinationCommittedBalance"]) if obj.get("destinationCommittedBalance") is not None else None
        })
        return _obj


