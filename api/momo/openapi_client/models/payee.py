# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money_type import MoneyType
from typing import Optional, Set
from typing_extensions import Self

class Payee(BaseModel):
    """
    A payment can be made in the context of an order, a recharge, for ongoing bills, for administrative fee (e.g. re-sending a paper copy of a bill), damaged device penalty, and more.
    """ # noqa: E501
    amount: Optional[MoneyType] = None
    tax_amount: Optional[MoneyType] = Field(default=None, alias="taxAmount")
    total_amount: MoneyType = Field(alias="totalAmount")
    payee_id_type: Optional[StrictStr] = Field(default=None, description="Identifier Type of the Payee.", alias="payeeIdType")
    payee_id: Optional[StrictStr] = Field(default=None, description="The Payee identifier, ie. can be a receivingfri or a merchant Id etc.", alias="payeeId")
    payee_note: Optional[StrictStr] = Field(default=None, description="A descriptive note for receiver transaction history, ie. a receiver message", alias="payeeNote")
    payee_name: Optional[StrictStr] = Field(default=None, description="Name of the payee", alias="payeeName")
    __properties: ClassVar[List[str]] = ["amount", "taxAmount", "totalAmount", "payeeIdType", "payeeId", "payeeNote", "payeeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_amount
        if self.tax_amount:
            _dict['taxAmount'] = self.tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['totalAmount'] = self.total_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payee from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": MoneyType.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "taxAmount": MoneyType.from_dict(obj["taxAmount"]) if obj.get("taxAmount") is not None else None,
            "totalAmount": MoneyType.from_dict(obj["totalAmount"]) if obj.get("totalAmount") is not None else None,
            "payeeIdType": obj.get("payeeIdType"),
            "payeeId": obj.get("payeeId"),
            "payeeNote": obj.get("payeeNote"),
            "payeeName": obj.get("payeeName")
        })
        return _obj


