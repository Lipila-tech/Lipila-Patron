# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.payment_history_response import PaymentHistoryResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PaymentHistoryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_payment_history(
        self,
        id: Annotated[StrictStr, Field(description="Unique identifier in the client for the payment in case it is needed to correlate.")],
        x_authorization: Annotated[Optional[StrictStr], Field(description="An authorization claim to be passed by the caller")] = None,
        transaction_id: Annotated[Optional[StrictStr], Field(description="Client generated Id to include for tracing requests.")] = None,
        target_system: Annotated[Optional[StrictStr], Field(description="target system expected to fulful the service")] = None,
        segment: Annotated[Optional[StrictStr], Field(description="Segment of the customer. For example, subscriber,agent, merchant, admin depending on the type of customer whome the operation is being performed against.")] = None,
        id_type: Annotated[Optional[StrictStr], Field(description="Type of the customerId in the path.")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum number of items to get from the backend system")] = None,
        page_number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Current page or offset number")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the transactions")] = None,
        request_type: Annotated[Optional[StrictStr], Field(description="type of request")] = None,
        node_id: Annotated[Optional[StrictStr], Field(description="Node making the request")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time of the transaction.If blank, then transaction received date will be set as start time")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Start date of the history range")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="End date of the history range")] = None,
        query_type: Annotated[Optional[StrictStr], Field(description="Type of request")] = None,
        registration_channel: Annotated[Optional[StrictStr], Field(description="Channel making the request")] = None,
        trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier from the caller")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentHistoryResponse:
        """Get a list of payments made on a reference or by a customer id

        Get a list of payments made on a reference or by a customer id

        :param id: Unique identifier in the client for the payment in case it is needed to correlate. (required)
        :type id: str
        :param x_authorization: An authorization claim to be passed by the caller
        :type x_authorization: str
        :param transaction_id: Client generated Id to include for tracing requests.
        :type transaction_id: str
        :param target_system: target system expected to fulful the service
        :type target_system: str
        :param segment: Segment of the customer. For example, subscriber,agent, merchant, admin depending on the type of customer whome the operation is being performed against.
        :type segment: str
        :param id_type: Type of the customerId in the path.
        :type id_type: str
        :param page_size: Maximum number of items to get from the backend system
        :type page_size: float
        :param page_number: Current page or offset number
        :type page_number: float
        :param status: Status of the transactions
        :type status: str
        :param request_type: type of request
        :type request_type: str
        :param node_id: Node making the request
        :type node_id: str
        :param start_time: Start time of the transaction.If blank, then transaction received date will be set as start time
        :type start_time: str
        :param start_date: Start date of the history range
        :type start_date: str
        :param end_date: End date of the history range
        :type end_date: str
        :param query_type: Type of request
        :type query_type: str
        :param registration_channel: Channel making the request
        :type registration_channel: str
        :param trace_id: Unique identifier from the caller
        :type trace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_history_serialize(
            id=id,
            x_authorization=x_authorization,
            transaction_id=transaction_id,
            target_system=target_system,
            segment=segment,
            id_type=id_type,
            page_size=page_size,
            page_number=page_number,
            status=status,
            request_type=request_type,
            node_id=node_id,
            start_time=start_time,
            start_date=start_date,
            end_date=end_date,
            query_type=query_type,
            registration_channel=registration_channel,
            trace_id=trace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentHistoryResponse",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_payment_history_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Unique identifier in the client for the payment in case it is needed to correlate.")],
        x_authorization: Annotated[Optional[StrictStr], Field(description="An authorization claim to be passed by the caller")] = None,
        transaction_id: Annotated[Optional[StrictStr], Field(description="Client generated Id to include for tracing requests.")] = None,
        target_system: Annotated[Optional[StrictStr], Field(description="target system expected to fulful the service")] = None,
        segment: Annotated[Optional[StrictStr], Field(description="Segment of the customer. For example, subscriber,agent, merchant, admin depending on the type of customer whome the operation is being performed against.")] = None,
        id_type: Annotated[Optional[StrictStr], Field(description="Type of the customerId in the path.")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum number of items to get from the backend system")] = None,
        page_number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Current page or offset number")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the transactions")] = None,
        request_type: Annotated[Optional[StrictStr], Field(description="type of request")] = None,
        node_id: Annotated[Optional[StrictStr], Field(description="Node making the request")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time of the transaction.If blank, then transaction received date will be set as start time")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Start date of the history range")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="End date of the history range")] = None,
        query_type: Annotated[Optional[StrictStr], Field(description="Type of request")] = None,
        registration_channel: Annotated[Optional[StrictStr], Field(description="Channel making the request")] = None,
        trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier from the caller")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentHistoryResponse]:
        """Get a list of payments made on a reference or by a customer id

        Get a list of payments made on a reference or by a customer id

        :param id: Unique identifier in the client for the payment in case it is needed to correlate. (required)
        :type id: str
        :param x_authorization: An authorization claim to be passed by the caller
        :type x_authorization: str
        :param transaction_id: Client generated Id to include for tracing requests.
        :type transaction_id: str
        :param target_system: target system expected to fulful the service
        :type target_system: str
        :param segment: Segment of the customer. For example, subscriber,agent, merchant, admin depending on the type of customer whome the operation is being performed against.
        :type segment: str
        :param id_type: Type of the customerId in the path.
        :type id_type: str
        :param page_size: Maximum number of items to get from the backend system
        :type page_size: float
        :param page_number: Current page or offset number
        :type page_number: float
        :param status: Status of the transactions
        :type status: str
        :param request_type: type of request
        :type request_type: str
        :param node_id: Node making the request
        :type node_id: str
        :param start_time: Start time of the transaction.If blank, then transaction received date will be set as start time
        :type start_time: str
        :param start_date: Start date of the history range
        :type start_date: str
        :param end_date: End date of the history range
        :type end_date: str
        :param query_type: Type of request
        :type query_type: str
        :param registration_channel: Channel making the request
        :type registration_channel: str
        :param trace_id: Unique identifier from the caller
        :type trace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_history_serialize(
            id=id,
            x_authorization=x_authorization,
            transaction_id=transaction_id,
            target_system=target_system,
            segment=segment,
            id_type=id_type,
            page_size=page_size,
            page_number=page_number,
            status=status,
            request_type=request_type,
            node_id=node_id,
            start_time=start_time,
            start_date=start_date,
            end_date=end_date,
            query_type=query_type,
            registration_channel=registration_channel,
            trace_id=trace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentHistoryResponse",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_payment_history_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Unique identifier in the client for the payment in case it is needed to correlate.")],
        x_authorization: Annotated[Optional[StrictStr], Field(description="An authorization claim to be passed by the caller")] = None,
        transaction_id: Annotated[Optional[StrictStr], Field(description="Client generated Id to include for tracing requests.")] = None,
        target_system: Annotated[Optional[StrictStr], Field(description="target system expected to fulful the service")] = None,
        segment: Annotated[Optional[StrictStr], Field(description="Segment of the customer. For example, subscriber,agent, merchant, admin depending on the type of customer whome the operation is being performed against.")] = None,
        id_type: Annotated[Optional[StrictStr], Field(description="Type of the customerId in the path.")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum number of items to get from the backend system")] = None,
        page_number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Current page or offset number")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the transactions")] = None,
        request_type: Annotated[Optional[StrictStr], Field(description="type of request")] = None,
        node_id: Annotated[Optional[StrictStr], Field(description="Node making the request")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time of the transaction.If blank, then transaction received date will be set as start time")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Start date of the history range")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="End date of the history range")] = None,
        query_type: Annotated[Optional[StrictStr], Field(description="Type of request")] = None,
        registration_channel: Annotated[Optional[StrictStr], Field(description="Channel making the request")] = None,
        trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier from the caller")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of payments made on a reference or by a customer id

        Get a list of payments made on a reference or by a customer id

        :param id: Unique identifier in the client for the payment in case it is needed to correlate. (required)
        :type id: str
        :param x_authorization: An authorization claim to be passed by the caller
        :type x_authorization: str
        :param transaction_id: Client generated Id to include for tracing requests.
        :type transaction_id: str
        :param target_system: target system expected to fulful the service
        :type target_system: str
        :param segment: Segment of the customer. For example, subscriber,agent, merchant, admin depending on the type of customer whome the operation is being performed against.
        :type segment: str
        :param id_type: Type of the customerId in the path.
        :type id_type: str
        :param page_size: Maximum number of items to get from the backend system
        :type page_size: float
        :param page_number: Current page or offset number
        :type page_number: float
        :param status: Status of the transactions
        :type status: str
        :param request_type: type of request
        :type request_type: str
        :param node_id: Node making the request
        :type node_id: str
        :param start_time: Start time of the transaction.If blank, then transaction received date will be set as start time
        :type start_time: str
        :param start_date: Start date of the history range
        :type start_date: str
        :param end_date: End date of the history range
        :type end_date: str
        :param query_type: Type of request
        :type query_type: str
        :param registration_channel: Channel making the request
        :type registration_channel: str
        :param trace_id: Unique identifier from the caller
        :type trace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_history_serialize(
            id=id,
            x_authorization=x_authorization,
            transaction_id=transaction_id,
            target_system=target_system,
            segment=segment,
            id_type=id_type,
            page_size=page_size,
            page_number=page_number,
            status=status,
            request_type=request_type,
            node_id=node_id,
            start_time=start_time,
            start_date=start_date,
            end_date=end_date,
            query_type=query_type,
            registration_channel=registration_channel,
            trace_id=trace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentHistoryResponse",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_payment_history_serialize(
        self,
        id,
        x_authorization,
        transaction_id,
        target_system,
        segment,
        id_type,
        page_size,
        page_number,
        status,
        request_type,
        node_id,
        start_time,
        start_date,
        end_date,
        query_type,
        registration_channel,
        trace_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if target_system is not None:
            
            _query_params.append(('targetSystem', target_system))
            
        if segment is not None:
            
            _query_params.append(('segment', segment))
            
        if id_type is not None:
            
            _query_params.append(('idType', id_type))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if request_type is not None:
            
            _query_params.append(('requestType', request_type))
            
        if node_id is not None:
            
            _query_params.append(('nodeId', node_id))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if start_date is not None:
            
            _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            
            _query_params.append(('endDate', end_date))
            
        if query_type is not None:
            
            _query_params.append(('queryType', query_type))
            
        if registration_channel is not None:
            
            _query_params.append(('registrationChannel', registration_channel))
            
        if trace_id is not None:
            
            _query_params.append(('traceId', trace_id))
            
        # process the header parameters
        if x_authorization is not None:
            _header_params['X-Authorization'] = x_authorization
        if transaction_id is not None:
            _header_params['transactionId'] = transaction_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/payments/{id}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


