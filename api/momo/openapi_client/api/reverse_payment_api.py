# coding: utf-8

"""
    Payments V1

    To facilitate the capability for consumers to make a payment or refund to service providers.

    The version of the OpenAPI document: v1.0
    Contact: developer-support@mtn.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.reverse_transaction_history import ReverseTransactionHistory

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ReversePaymentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_reverse_transaction_history(
        self,
        customer_id: Annotated[StrictStr, Field(description="Unique identifier of the customer. It should be financial resource identification in case of target system is ECW")],
        transactiontype: Annotated[StrictStr, Field(description="transactiontype")],
        correlator_id: Annotated[Optional[StrictStr], Field(description="Unique identifier in the client for the payment in case it is needed to correlate.")] = None,
        transaction_id: Annotated[Optional[StrictStr], Field(description="Client generated Id to include for tracing requests.")] = None,
        transactionstatus: Annotated[Optional[StrictStr], Field(description="This is the provider that is expected to fulfill the query transaction service")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="amount of the transaction")] = None,
        x_authorization: Annotated[Optional[StrictStr], Field(description="Encrypted ECW credentials")] = None,
        node_id: Annotated[Optional[StrictStr], Field(description="Third parties unique identifier. Can also be called channelId.")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history created  from this start date.")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history created until this stop date.")] = None,
        other_fri: Annotated[Optional[StrictStr], Field(description="The FRI of the other party in transaction, could be from or to depending on direction. Validated with IsFRI.")] = None,
        pos_msisdn: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history performed be the specified point of sale MSISDN.")] = None,
        quote_id: Annotated[Optional[StrictStr], Field(description="List all information based on quoteId  then quoteId used.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return in the response. Default value 50.")] = None,
        page_no: Annotated[Optional[StrictInt], Field(description="indexoffset the list of results returned by an API. Optional, If its not specified we should return all the values.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReverseTransactionHistory:
        """Provides the history or list of revese transactions  to third party.

        Provides the status of a Payment Transaction to service providers.

        :param customer_id: Unique identifier of the customer. It should be financial resource identification in case of target system is ECW (required)
        :type customer_id: str
        :param transactiontype: transactiontype (required)
        :type transactiontype: str
        :param correlator_id: Unique identifier in the client for the payment in case it is needed to correlate.
        :type correlator_id: str
        :param transaction_id: Client generated Id to include for tracing requests.
        :type transaction_id: str
        :param transactionstatus: This is the provider that is expected to fulfill the query transaction service
        :type transactionstatus: str
        :param amount: amount of the transaction
        :type amount: float
        :param x_authorization: Encrypted ECW credentials
        :type x_authorization: str
        :param node_id: Third parties unique identifier. Can also be called channelId.
        :type node_id: str
        :param start_date: Retrieve transaction history created  from this start date.
        :type start_date: str
        :param end_date: Retrieve transaction history created until this stop date.
        :type end_date: str
        :param other_fri: The FRI of the other party in transaction, could be from or to depending on direction. Validated with IsFRI.
        :type other_fri: str
        :param pos_msisdn: Retrieve transaction history performed be the specified point of sale MSISDN.
        :type pos_msisdn: str
        :param quote_id: List all information based on quoteId  then quoteId used.
        :type quote_id: str
        :param limit: The maximum number of items to return in the response. Default value 50.
        :type limit: int
        :param page_no: indexoffset the list of results returned by an API. Optional, If its not specified we should return all the values.
        :type page_no: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reverse_transaction_history_serialize(
            customer_id=customer_id,
            transactiontype=transactiontype,
            correlator_id=correlator_id,
            transaction_id=transaction_id,
            transactionstatus=transactionstatus,
            amount=amount,
            x_authorization=x_authorization,
            node_id=node_id,
            start_date=start_date,
            end_date=end_date,
            other_fri=other_fri,
            pos_msisdn=pos_msisdn,
            quote_id=quote_id,
            limit=limit,
            page_no=page_no,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReverseTransactionHistory",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_reverse_transaction_history_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="Unique identifier of the customer. It should be financial resource identification in case of target system is ECW")],
        transactiontype: Annotated[StrictStr, Field(description="transactiontype")],
        correlator_id: Annotated[Optional[StrictStr], Field(description="Unique identifier in the client for the payment in case it is needed to correlate.")] = None,
        transaction_id: Annotated[Optional[StrictStr], Field(description="Client generated Id to include for tracing requests.")] = None,
        transactionstatus: Annotated[Optional[StrictStr], Field(description="This is the provider that is expected to fulfill the query transaction service")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="amount of the transaction")] = None,
        x_authorization: Annotated[Optional[StrictStr], Field(description="Encrypted ECW credentials")] = None,
        node_id: Annotated[Optional[StrictStr], Field(description="Third parties unique identifier. Can also be called channelId.")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history created  from this start date.")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history created until this stop date.")] = None,
        other_fri: Annotated[Optional[StrictStr], Field(description="The FRI of the other party in transaction, could be from or to depending on direction. Validated with IsFRI.")] = None,
        pos_msisdn: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history performed be the specified point of sale MSISDN.")] = None,
        quote_id: Annotated[Optional[StrictStr], Field(description="List all information based on quoteId  then quoteId used.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return in the response. Default value 50.")] = None,
        page_no: Annotated[Optional[StrictInt], Field(description="indexoffset the list of results returned by an API. Optional, If its not specified we should return all the values.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReverseTransactionHistory]:
        """Provides the history or list of revese transactions  to third party.

        Provides the status of a Payment Transaction to service providers.

        :param customer_id: Unique identifier of the customer. It should be financial resource identification in case of target system is ECW (required)
        :type customer_id: str
        :param transactiontype: transactiontype (required)
        :type transactiontype: str
        :param correlator_id: Unique identifier in the client for the payment in case it is needed to correlate.
        :type correlator_id: str
        :param transaction_id: Client generated Id to include for tracing requests.
        :type transaction_id: str
        :param transactionstatus: This is the provider that is expected to fulfill the query transaction service
        :type transactionstatus: str
        :param amount: amount of the transaction
        :type amount: float
        :param x_authorization: Encrypted ECW credentials
        :type x_authorization: str
        :param node_id: Third parties unique identifier. Can also be called channelId.
        :type node_id: str
        :param start_date: Retrieve transaction history created  from this start date.
        :type start_date: str
        :param end_date: Retrieve transaction history created until this stop date.
        :type end_date: str
        :param other_fri: The FRI of the other party in transaction, could be from or to depending on direction. Validated with IsFRI.
        :type other_fri: str
        :param pos_msisdn: Retrieve transaction history performed be the specified point of sale MSISDN.
        :type pos_msisdn: str
        :param quote_id: List all information based on quoteId  then quoteId used.
        :type quote_id: str
        :param limit: The maximum number of items to return in the response. Default value 50.
        :type limit: int
        :param page_no: indexoffset the list of results returned by an API. Optional, If its not specified we should return all the values.
        :type page_no: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reverse_transaction_history_serialize(
            customer_id=customer_id,
            transactiontype=transactiontype,
            correlator_id=correlator_id,
            transaction_id=transaction_id,
            transactionstatus=transactionstatus,
            amount=amount,
            x_authorization=x_authorization,
            node_id=node_id,
            start_date=start_date,
            end_date=end_date,
            other_fri=other_fri,
            pos_msisdn=pos_msisdn,
            quote_id=quote_id,
            limit=limit,
            page_no=page_no,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReverseTransactionHistory",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_reverse_transaction_history_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="Unique identifier of the customer. It should be financial resource identification in case of target system is ECW")],
        transactiontype: Annotated[StrictStr, Field(description="transactiontype")],
        correlator_id: Annotated[Optional[StrictStr], Field(description="Unique identifier in the client for the payment in case it is needed to correlate.")] = None,
        transaction_id: Annotated[Optional[StrictStr], Field(description="Client generated Id to include for tracing requests.")] = None,
        transactionstatus: Annotated[Optional[StrictStr], Field(description="This is the provider that is expected to fulfill the query transaction service")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="amount of the transaction")] = None,
        x_authorization: Annotated[Optional[StrictStr], Field(description="Encrypted ECW credentials")] = None,
        node_id: Annotated[Optional[StrictStr], Field(description="Third parties unique identifier. Can also be called channelId.")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history created  from this start date.")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history created until this stop date.")] = None,
        other_fri: Annotated[Optional[StrictStr], Field(description="The FRI of the other party in transaction, could be from or to depending on direction. Validated with IsFRI.")] = None,
        pos_msisdn: Annotated[Optional[StrictStr], Field(description="Retrieve transaction history performed be the specified point of sale MSISDN.")] = None,
        quote_id: Annotated[Optional[StrictStr], Field(description="List all information based on quoteId  then quoteId used.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return in the response. Default value 50.")] = None,
        page_no: Annotated[Optional[StrictInt], Field(description="indexoffset the list of results returned by an API. Optional, If its not specified we should return all the values.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Provides the history or list of revese transactions  to third party.

        Provides the status of a Payment Transaction to service providers.

        :param customer_id: Unique identifier of the customer. It should be financial resource identification in case of target system is ECW (required)
        :type customer_id: str
        :param transactiontype: transactiontype (required)
        :type transactiontype: str
        :param correlator_id: Unique identifier in the client for the payment in case it is needed to correlate.
        :type correlator_id: str
        :param transaction_id: Client generated Id to include for tracing requests.
        :type transaction_id: str
        :param transactionstatus: This is the provider that is expected to fulfill the query transaction service
        :type transactionstatus: str
        :param amount: amount of the transaction
        :type amount: float
        :param x_authorization: Encrypted ECW credentials
        :type x_authorization: str
        :param node_id: Third parties unique identifier. Can also be called channelId.
        :type node_id: str
        :param start_date: Retrieve transaction history created  from this start date.
        :type start_date: str
        :param end_date: Retrieve transaction history created until this stop date.
        :type end_date: str
        :param other_fri: The FRI of the other party in transaction, could be from or to depending on direction. Validated with IsFRI.
        :type other_fri: str
        :param pos_msisdn: Retrieve transaction history performed be the specified point of sale MSISDN.
        :type pos_msisdn: str
        :param quote_id: List all information based on quoteId  then quoteId used.
        :type quote_id: str
        :param limit: The maximum number of items to return in the response. Default value 50.
        :type limit: int
        :param page_no: indexoffset the list of results returned by an API. Optional, If its not specified we should return all the values.
        :type page_no: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reverse_transaction_history_serialize(
            customer_id=customer_id,
            transactiontype=transactiontype,
            correlator_id=correlator_id,
            transaction_id=transaction_id,
            transactionstatus=transactionstatus,
            amount=amount,
            x_authorization=x_authorization,
            node_id=node_id,
            start_date=start_date,
            end_date=end_date,
            other_fri=other_fri,
            pos_msisdn=pos_msisdn,
            quote_id=quote_id,
            limit=limit,
            page_no=page_no,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReverseTransactionHistory",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_reverse_transaction_history_serialize(
        self,
        customer_id,
        transactiontype,
        correlator_id,
        transaction_id,
        transactionstatus,
        amount,
        x_authorization,
        node_id,
        start_date,
        end_date,
        other_fri,
        pos_msisdn,
        quote_id,
        limit,
        page_no,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if transactiontype is not None:
            
            _query_params.append(('transactiontype', transactiontype))
            
        if amount is not None:
            
            _query_params.append(('amount', amount))
            
        if node_id is not None:
            
            _query_params.append(('nodeId', node_id))
            
        if start_date is not None:
            
            _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            
            _query_params.append(('endDate', end_date))
            
        if other_fri is not None:
            
            _query_params.append(('otherFri', other_fri))
            
        if pos_msisdn is not None:
            
            _query_params.append(('posMsisdn', pos_msisdn))
            
        if quote_id is not None:
            
            _query_params.append(('quoteId', quote_id))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if page_no is not None:
            
            _query_params.append(('pageNo', page_no))
            
        # process the header parameters
        if customer_id is not None:
            _header_params['customerId'] = customer_id
        if correlator_id is not None:
            _header_params['correlatorId'] = correlator_id
        if transaction_id is not None:
            _header_params['transactionId'] = transaction_id
        if transactionstatus is not None:
            _header_params['transactionstatus'] = transactionstatus
        if x_authorization is not None:
            _header_params['X-Authorization'] = x_authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'The services object/envelope will be null'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reverse-payment/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


